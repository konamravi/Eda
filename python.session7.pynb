{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d3b979ee-dc07-4452-8602-b7ec58aa81f0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# step-1:\n",
    "# import <package_name>\n",
    "\n",
    "# step-2:\n",
    "# dir <package_name>\n",
    "# method will display\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8be1b2a4-a250-4924-a8d6-f4336c354248",
   "metadata": {},
   "outputs": [],
   "source": [
    "import.random"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d7d5148f-4e5b-4034-9edf-26610cbf053e",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'random' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[3], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m random\u001b[38;5;241m.\u001b[39mrandint(\u001b[38;5;241m10\u001b[39m,\u001b[38;5;241m20\u001b[39m)\n",
      "\u001b[1;31mNameError\u001b[0m: name 'random' is not defined"
     ]
    }
   ],
   "source": [
    "random.randint(10,20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1bfaa0c3-2249-4e61-85d0-e2504a479621",
   "metadata": {},
   "outputs": [],
   "source": [
    "():function or method \n",
    "only functions ormethod callable\n",
    "if some times says not callable means, it is not function\n",
    "- it is not function means ,you need to remove the bracket\n",
    "bound method means====add the bracket\n",
    "function===add the bracket\n",
    "not callable===remove the bracket"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "71b246ee-eec9-47c3-9686-bd7eae0ebcab",
   "metadata": {},
   "source": [
    "**Time**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "3a551375-11ee-4564-830d-a71b5b639e07",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Father:hello\n",
      "dugthter:hi papa now are you\n",
      "father: do you have scholl today\n"
     ]
    }
   ],
   "source": [
    "import time\n",
    "\n",
    "print(\"Father:hello\")\n",
    "time.sleep(2)\n",
    "print(\"dugthter:hi papa now are you\")\n",
    "time.sleep(2)\n",
    "print(\"father: do you have scholl today\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "55f98a6f-e98c-42a8-badf-ed98df6af871",
   "metadata": {},
   "outputs": [],
   "source": [
    "cmputer vision is used to image"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "6576b7e2-3a86-488c-bddf-9422a7e1242d",
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'cv2'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[14], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mcv2\u001b[39;00m\n",
      "\u001b[1;31mModuleNotFoundError\u001b[0m: No module named 'cv2'"
     ]
    }
   ],
   "source": [
    "import cv2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b95fa0b5-aa78-40d5-98fa-3b40e3ea5ee3",
   "metadata": {},
   "source": [
    "- when ever moduel not found we need to install it \n",
    "- here our pakage name is cv2\n",
    "- 99% the installation will be like this \n",
    "pip install <package_name>\n",
    "- some package installation name will different and python import name is different\n",
    "- in orderto installation the packages we need internet\n",
    "-"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "a53b746f-3aca-46b8-a816-a577a246b432",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "622ea1de-a342-4f37-91e5-c815e5c25f8e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<module 'numpy' from 'C:\\\\Users\\\\Lenovo\\\\anaconda3\\\\Lib\\\\site-packages\\\\numpy\\\\__init__.py'>"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "numpy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "064324a4-12fd-4d08-bed6-96749ff51358",
   "metadata": {},
   "outputs": [],
   "source": [
    "!pip install opencv-python\n",
    "- in jupyter noot book we need add of! marks"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "0c8e9d8f-aaa3-4c29-be4f-dc92e54e815e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "300\n"
     ]
    }
   ],
   "source": [
    "# hard coding \n",
    "# we are vfixed values \n",
    "number1=100\n",
    "number2=200\n",
    "add=number1+number2\n",
    "print(add)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "6ed7b2a8-c6af-4dc2-b7f2-cfb9007e543b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "enter the number1: 100\n",
      "enter the number2: 200\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "add300\n"
     ]
    }
   ],
   "source": [
    "number1=eval(input(\"enter the number1:\"))\n",
    "number2=eval(input(\"enter the number2:\"))\n",
    "add=number1+number2\n",
    "print(f\"add{add}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "2c6ae6cd-d744-4e44-9fd6-c5006ee34bcd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the addition of number 74 and 143 is 217\n"
     ]
    }
   ],
   "source": [
    "# we can take the number randamly \n",
    "import random\n",
    "number1=random.randint(1,100)\n",
    "number2=random.randint(100,200)\n",
    "add=(number1+number2)\n",
    "print(f\"the addition of number {number1} and {number2} is {add}\") \n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ef83828-c533-462e-b58f-689540f27380",
   "metadata": {},
   "source": [
    "**how we pass the numbers**\n",
    "- hard cooding\n",
    "- using key board\n",
    "- using randam package,taking number "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "abfe7881-ac23-49df-beea-4a9bfaafc6af",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "enter the n2 200\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the average of10,200and53 is :87.66666666666667\n"
     ]
    }
   ],
   "source": [
    "n1=10\n",
    "n2=eval(input(\"enter the n2\"))\n",
    "n3=random.randint(1,100)\n",
    "avg=(n1+n2+n3)/3\n",
    "print(F\"the average of{n1},{n2}and{n3} is :{avg}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3d08adeb-dc57-4488-b04d-5a458d69de9e",
   "metadata": {},
   "source": [
    "**round**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "bb56388f-e2c4-4ac5-96fe-c6f7f1a185ce",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "88"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "avg=87.66666666666667\n",
    "round(87.66666666666667)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "bbec6c10-71cf-44aa-b747-4d84dc3f62e8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "22.667"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "avg=22.666666666666668\n",
    "round(avg,3)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3117e584-d9d1-4334-8fb2-5d8d208d5766",
   "metadata": {},
   "outputs": [],
   "source": [
    "type()\n",
    "input()\n",
    "print()\n",
    "round()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "c0da467b-d614-4fba-af19-977dbd5de5ea",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "enter the n2 20\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the average of10,20and54 is :28.0\n"
     ]
    }
   ],
   "source": [
    "n1=10\n",
    "n2=eval(input(\"enter the n2\"))\n",
    "n3=random.randint(1,100)\n",
    "avg=(n1+n2+n3)/3\n",
    "avg1=round(avg,2)\n",
    "print(F\"the average of{n1},{n2}and{n3} is :{avg1}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9a8ac23a-ff12-4eab-82f1-89bc5216aad6",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
